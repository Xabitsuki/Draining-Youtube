from functions import *

def get_plylst_id(pth_vid):

    split = pth_vid.split(pth_vids())[1].split('/')
    if len(split) == 3:

        plylst = split[1]
        id = split[2]

        return id, plylst

    elif len(split) == 2:

        id =split[1]
        return id , ''

    return

## TODO implement get_pths_vids(plylst)

# Make sets
def make_sets(v_id, plylst=''):
    """Used after the iter_0 function ran to separate the frames into sets.
    Return the path the to the sets folder"""

    triangles = split_triangles(mtchs_bin_to_mat(path_mtchs=pth_iter0_mtchs(v_id, plylst),
                                                 path_frames=pth_frms(v_id, plylst)))

    return move_triangles(triangles=triangles,
                          path_vid=pth_vid(v_id, plylst),
                          path_frames=pth_frms(v_id, plylst),
                          path_feats=pth_iter0_feats(v_id, plylst))


def iter0(path_vid, sample=False):
    """Function used to make the first iteration of processing loop"""

    v_id , plylst = get_plylst_id(path_vid)

    # Extract frames
    xtrct_frame(v_id, plylst, sample)

    # Make iter0 dir
    pth_it0 = pth_iter0(v_id, plylst)
    make_dir(pth_it0)

    # Listing
    openmvg_list(pth_vid=pth_vid(v_id, plylst), pth_frms=pth_frms(v_id, plylst), pth_out=pth_it0)

    # Compute features, matches

    path_feat = pth_iter0_feats(v_id, plylst)
    make_dir(path_feat)

    sfm = 'sfm_data.json'
    path_sfm = os.path.join(pth_it0, sfm)

    openmvg_features(path_sfm=path_sfm, path_features=path_feat)
    openmvg_matches(path_sfm=path_sfm, path_matches=path_feat)

    # Make sets
    pth_sets =  make_sets(v_id, plylst)
    remove_ds_store(pth_sets())
    return pth_sets

def sfm_pipe(pth_set):
    """Function that performs the sfm pipline given the path to
    a set as generated by make_sets."""

    frames = os.path.join(pth_set, 'frames')
    features = os.path.join(pth_set, 'features')
    v_id = get_v_id(pth_set)
    print(v_id)

    openmvg_list(v_id=v_id, frm_dir=frames, out_dir=pth_set)

    path_sfm = pth_sfm(pth_set)
    openmvg_features(path_sfm=path_sfm, path_features=features)
    openmvg_matches(path_sfm=path_sfm, path_matches=features)

    path_incr = os.path.join(pth_set, 'incremental')
    make_dir(path_incr)
    openmvg_incremental(path_sfm=path_sfm, path_matches=features, path_incr=path_incr)
    openmvg_colors(path_incr=path_incr)



def function(url, playlist='', n_items=5):

    pth_vds = pth_vids()

    if playlist:

        items=''
        for ii in range(n_items+1):
            items = items + '{},'.format(ii)
        items = items[:-1]

        pth_plylst = os.path.join(pth_vds,playlist)
        make_dir(pth_plylst)

        # Download
        yt_dl(url=url, playlist=playlist, playlist_items=items)

        v_ids = os.listdir(pth_plylst)

        # Parallelize process
        jobs = []
        for v_id in v_ids:
            p = multiprocessing.Process(target=xtrct_frame, args=(v_id, True))
            jobs.append(p)
            p.start()




